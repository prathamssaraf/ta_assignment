[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "gmail-client"
version = "1.0.0"
description = "A professional Gmail client interface with comprehensive CRUD operations"
authors = [
    {name = "TA Assignment", email = "ta@example.com"}
]
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.11"
dependencies = [
    "gmail-client-impl",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "mypy>=1.5.0",
    "ruff>=0.0.280",
    "pre-commit>=3.3.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocstrings[python]>=0.22.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "pytest-integration>=0.2.2",
]

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "mypy>=1.5.0",
    "ruff>=0.0.280",
    "pre-commit>=3.3.0",
]

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.uv.sources]
gmail-client-impl = { workspace = true }

[tool.uv.workspace]
members = [
    "src/message",
    "src/gmail_message_impl", 
    "src/mail_client_api",
    "src/gmail_client_impl",
]

[tool.pytest.ini_options]
testpaths = ["tests", "src/*/tests"]
pythonpath = [
    "src",
    "src/message/src",
    "src/mail_client_api/src", 
    "src/gmail_message_impl/src",
    "src/gmail_client_impl/src"
]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
]
markers = [
    "integration: marks tests as integration tests (may be slow)",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/protocols/*",
    "*/*_protocol.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "\\.\\.\\.",
]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
mypy_path = "src"

[[tool.mypy.overrides]]
module = "googleapiclient.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "google.auth.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "google_auth_oauthlib.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "google.oauth2.*"
ignore_missing_imports = true

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long
    "B008",   # do not perform function calls in argument defaults
    "PLR0913", # too many arguments to function call
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "ARG002",  # unused method argument
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["PLR2004", "ARG002", "ARG001"]
"src/*/src/*/__init__.py" = ["F401"]

[tool.ruff.lint.isort]
known-first-party = ["message", "gmail_message_impl", "mail_client_api", "gmail_client_impl"]
